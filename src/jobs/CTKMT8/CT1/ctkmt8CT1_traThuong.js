const cron = require("node-cron");
const moment = require("moment");
const db = require("../../../config/connectMySQL");
const axios = require("axios");

module.exports = () => {
  cron.schedule('5-59/10 * * * * *', async () => { // Test: ch·∫°y sau Job 1 kho·∫£ng 5 gi√¢y
    console.log("[CRON] B·∫Øt ƒë·∫ßu tr·∫£ th∆∞·ªüng CTKM...");

    const startDate = moment("2025-08-01");
    const endDate = moment("2025-08-15").endOf("day");
    const today = moment();

    function formatMoney(number) {
      return Number(number).toLocaleString('en-US');
    }

    if (!today.isBetween(startDate, endDate, null, "[]")) {
      console.log("[CRON] Kh√¥ng n·∫±m trong th·ªùi gian di·ªÖn ra ch∆∞∆°ng tr√¨nh.");
      return;
    }

    try {
      const [rows] = await db.promise().query(
        `SELECT * FROM ctkm_flash_sale_t8 WHERE IS_REWARDED = 'N'`
      );

      if (rows.length === 0) {
        console.log("[CRON] Kh√¥ng c√≥ kho·∫£n n√†o c·∫ßn tr·∫£ th∆∞·ªüng.");
        return;
      }

      const authResSecond = await axios.get(`http://${process.env.IP_SERVER}:${process.env.PORT_ACCOUNT}/auth/token`, {
        headers: {
          "grant-type": "client_credentials",
          "Authorization": "Basic " + process.env.TOKEN_ACCOUNT
        }
      });

      let rewardedCount = 0;

      for (let row of rows) {
        try {
          // üîπ L·∫•y token push notification & s·ªë t√†i kho·∫£n nh·∫≠n th∆∞·ªüng
          const [userInfo] = await db.promise().query(
            `SELECT 
                u.BANK_ACCOUNT_VNFITE,
                d.TOKEN
             FROM tbl_user_utility u
             LEFT JOIN tbl_user_device d 
               ON u.USER_ID = d.USER_ID AND d.IS_DELETED = 'N'
             WHERE u.USER_ID = ?
             LIMIT 1`,
            [row.USER_ID]
          );

          const token = userInfo.length > 0 ? userInfo[0].TOKEN : null;
          const bankAccount = userInfo.length > 0 ? userInfo[0].BANK_ACCOUNT_VNFITE : null;

          // üîπ C·∫≠p nh·∫≠t l√£i su·∫•t & l·ª£i nhu·∫≠n m·ªõi
          const [updateResult] = await db.promise().query(
            `UPDATE tbl_user_investment_holding_product
             SET INTEREST_RATE = ?, TOTAL_PROFIT = ?
             WHERE INVESTMENT_CODE = ?`,
            [row.NEW_INTEREST_RATE, row.NEW_TOTAL_PROFIT, row.INVESTMENT_CODE]
          );

          if (updateResult.affectedRows > 0) {
            // üîπ ƒê√°nh d·∫•u ƒë√£ tr·∫£ th∆∞·ªüng
            const [rewardUpdate] = await db.promise().query(
              `UPDATE ctkm_flash_sale_t8
               SET IS_REWARDED = 'Y', UPDATED_AT = NOW()
               WHERE ID = ?`,
              [row.ID]
            );
            if (row.PRODUCT_ID == '37752337-3ba3-4543-b7a4-bcf95d511ff3' || row.PRODUCT_ID == '6e4bf0cf-73c9-4f7b-b483-467f64905762') {
                const plusMoneyRes = await axios.put(`http://${process.env.IP_SERVER}:${process.env.PORT_ACCOUNT}/api/v2/account/${bankAccount}`, {
                    "fluctuatedAmount": row.NEW_TOTAL_PROFIT - row.OLD_TOTAL_PROFIT,
                    "plus": true,
                    "source": "VNFFITE_CAPITAL"
                  }, {
                    headers: {
                      requestId: "1111",
                      Authorization: "Bearer " + authResSecond.data.data.accessToken
                    }
                  })
                if(plusMoneyRes?.data?.result?.isOK != true) {
                    console.log("C·ªông ti·ªÅn Fail: ", plusMoneyRes?.data)
                }
            }

            if (rewardUpdate.affectedRows > 0) {
              console.log(`[REWARD] ƒê√£ tr·∫£ th∆∞·ªüng cho ${row.FULL_NAME} | L√£i m·ªõi: ${formatMoney(row.NEW_TOTAL_PROFIT)} | STK: ${bankAccount || "Kh√¥ng c√≥"}`);

              // üîπ G·ª≠i push notification n·∫øu c√≥ token
              if (token) {
                try {
                  // Push th√¥ng b√°o ch√≠nh
                  await axios.post(
                    'https://service.vnfite.com.vn/push-notification/v2/notification/pushNotification',
                    {
                      alias: "tikluy",
                      fcmToken: token,
                      title: "Tr·∫£ th∆∞·ªüng FLASH SALE",
                      body: `Ch√∫c m·ª´ng! B·∫°n ƒë√£ nh·∫≠n th√™m 2% l√£i su·∫•t t·ª´ TIKLUY\nCh√∫c m·ª´ng B·∫°n ƒë√£ th·ªèa m√£n ƒëi·ªÅu ki·ªán ch∆∞∆°ng tr√¨nh "T·∫∑ng l√£i su·∫•t ngay ‚Äì Ti·ªÅn v√†o t·∫≠n tay" v·ªõi:\nKho·∫£n ƒë·∫ßu t∆∞: ${row.PRODUCT_NAME}\nM√£ ƒë·∫ßu t∆∞: ${row.INVESTMENT_CODE}\nC·∫£m ∆°n B·∫°n ƒë√£ tin t∆∞·ªüng ƒë·ªìng h√†nh c√πng TIKLUY trong ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i ƒë·∫∑c bi·ªát l·∫ßn n√†y!`
                    }
                  );

                  // N·∫øu ƒë√∫ng PRODUCT_ID ‚Üí g·ª≠i th√™m th√¥ng b√°o "Tr·∫£ th√™m ti·ªÅn l√£i t·ª´ CTKM"
                  if (row.PRODUCT_ID == '37752337-3ba3-4543-b7a4-bcf95d511ff3' || row.PRODUCT_ID == '6e4bf0cf-73c9-4f7b-b483-467f64905762') {
                    await axios.post(
                      'https://service.vnfite.com.vn/push-notification/v2/notification/pushNotification',
                      {
                        alias: "tikluy",
                        fcmToken: token,
                        title: "Tr·∫£ th√™m ti·ªÅn l√£i t·ª´ CTKM",
                        body: `B·∫°n ƒë√£ nh·∫≠n th√™m ${formatMoney(row.NEW_TOTAL_PROFIT - row.OLD_TOTAL_PROFIT)} VNƒê ti·ªÅn l√£i t·ª´ ch∆∞∆°ng tr√¨nh FLASH SALE cho s·∫£n ph·∫©m ${row.PRODUCT_NAME}.`
                      }
                    );
                  }

                  console.log(`[PUSHED] G·ª≠i noti th√†nh c√¥ng t·ªõi: ${row.FULL_NAME}`);
                } catch (error) {
                  console.log("push noti failed: ", JSON.stringify(error));
                }
              } else {
                console.log(`[PUSH] Kh√¥ng t√¨m th·∫•y token cho ${row.FULL_NAME}`);
              }

              rewardedCount++;
            }
          }
        } catch (err) {
          console.error(`[ERROR] L·ªói khi tr·∫£ th∆∞·ªüng cho ${row.FULL_NAME}:`, err.message);
        }
      }

      console.log(`[CRON] Ho√†n th√†nh tr·∫£ th∆∞·ªüng cho ${rewardedCount} kho·∫£n.`);
    } catch (err) {
      console.error("[CRON] L·ªói khi l·∫•y danh s√°ch tr·∫£ th∆∞·ªüng:", err.message);
    }
  });
};
